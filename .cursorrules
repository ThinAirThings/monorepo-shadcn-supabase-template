<Root>
  <ProjectSummary>
    <!-- Same top-level project summary or any other descriptive metadata can go here -->
    <Name>A Modern Type-Safe Application (Updated Patterns)</Name>
    <Description>
      This file outlines updated structural patterns gleaned from the codebase.
      Each rule focuses on architectural or compositional techniques that appear
      consistently throughout the repository.
    </Description>
  </ProjectSummary>

  <Rules>
  
    <!-- ========================================================= -->
    <!-- 1) React Hook Form + Zod + Apollo Mutation -->
    <!-- --------------------------------------------------------- -->
    <Rule>
      <Name>react_hook_form_zod_apollo</Name>
      <Description>
        Use a consistent approach for forms: React Hook Form + Zod for validation,
        and Apollo Mutations for server updates.
      </Description>
      <Pattern>\.tsx$</Pattern>
      <Conventions>

        <!-- 1.1 Zod Resolver and Default Values -->
        <Convention>
          <Description>
            Always create a Zod schema that matches the backend shape. 
            Use zodResolver in useForm and supply defaultValues from server data.
          </Description>
          <Example>
            <Correct>
              ```tsx
              const formSchema = z.object({ 
                firstName: z.string().min(2), 
                // ... 
              });

              const form = useForm<FormValues>({
                resolver: zodResolver(formSchema),
                defaultValues: {
                  // hydrated from parentFragment or similar server data
                  firstName: parentData?.firstName ?? "",
                },
              });
              ```
            </Correct>
            <Incorrect>
              ```tsx
              // Missing zodResolver or no defaults from server
              const form = useForm<FormValues>();
              ```
            </Incorrect>
          </Example>
        </Convention>

        <!-- 1.2 Imperative Ref and handleSubmit -->
        <Convention>
          <Description>
            Use a form-ref with <useImperativeHandle> to expose 
            a <submit> method. Let parent components call .submit({onSuccess, onError}).
          </Description>
          <Example>
            <Correct>
              ```tsx
              useImperativeHandle(ref, () => ({
                submit: () => form.handleSubmit(...args)(),
                mutationLoading: createLoading,
              }), [...deps]);
              ```
            </Correct>
            <Incorrect>
              ```tsx
              // Not exposing handleSubmit; parent cannot manually trigger submission
              useImperativeHandle(ref, () => ({}));
              ```
            </Incorrect>
          </Example>
        </Convention>

        <!-- 1.3 Single Top-Level Form & Hidden Submit -->
        <Convention>
          <Description>
            Each form has a single <form> element. Always include a hidden 
            <button type="submit"> to handle Enter-press submissions for 
            multi-field forms.
          </Description>
          <Example>
            <Correct>
              ```tsx
              <Form {...form}>
                <form onSubmit={form.handleSubmit(...)} className="space-y-6 px-2">
                  <button type="submit" className="hidden" />
                  <!-- form fields -->
                </form>
              </Form>
              ```
            </Correct>
            <Incorrect>
              ```tsx
              // No hidden submit button => Enter may not trigger submission
              <div>...some fields...</div>
              ```
            </Incorrect>
          </Example>
        </Convention>

        <!-- 1.4 Clean Error Handling -->
        <Convention>
          <Description>
            In handleSubmit callbacks, catch GraphQL errors, 
            map them to form fields if appropriate, and provide user-friendly messages.
          </Description>
          <Example>
            <Correct>
              ```tsx
              form.handleSubmit(async (values) => {
                try {
                  const { data } = await myMutation({ variables: values });
                  if (data?.myMutation?.error) {
                    form.setError("fieldName", { message: data.myMutation.error.message });
                  }
                } catch (error) {
                  onError?.(error as ApolloError);
                }
              })();
              ```
            </Correct>
            <Incorrect>
              ```tsx
              // Mutation fails silently; no setError or user feedback
              form.handleSubmit(async (values) => {
                await myMutation({ variables: values });
              })();
              ```
            </Incorrect>
          </Example>
        </Convention>

      </Conventions>
    </Rule>


    <!-- ========================================================= -->
    <!-- 2) "nuqs" for Query Param State -->
    <!-- --------------------------------------------------------- -->
    <Rule>
      <Name>nuqs_query_state</Name>
      <Description>
        Use the `useQueryState` hook from "nuqs" to store and retrieve query
        parameters (e.g., organizationId, step, etc.). This standardizes
        ephemeral route-based state management.
      </Description>
      <Pattern>\.(ts|tsx)$</Pattern>
      <Conventions>

        <Convention>
          <Description>
            Always destructure [value, setValue] from useQueryState. 
            Provide a defaultValue or handle "skip" logic for queries if undefined.
          </Description>
          <Example>
            <Correct>
              ```tsx
              const [organizationId, setOrganizationId] = useQueryState('organizationId');

              // Use skip logic for Apollo queries
              const { data } = useQuery(SomeQuery, {
                skip: !organizationId,
                variables: { organizationId },
              });
              ```
            </Correct>
            <Incorrect>
              ```tsx
              // Using local state or direct search params for ephemeral route-based data
              const [organizationId, setOrganizationId] = useState('');
              ```
            </Incorrect>
          </Example>
        </Convention>

      </Conventions>
    </Rule>


    <!-- ========================================================= -->
    <!-- 3) Skeleton Components for Loading States -->
    <!-- --------------------------------------------------------- -->
    <Rule>
      <Name>loading_skeleton_pattern</Name>
      <Description>
        Use Skeleton components to provide placeholder UIs whenever data is loading.
        Each form or table has a corresponding Skeleton version.
      </Description>
      <Pattern>\.(tsx|jsx)$</Pattern>
      <Conventions>

        <Convention>
          <Description>
            For each domain-specific component, create a <SomethingSkeleton> version
            that structurally matches the loaded UI. 
          </Description>
          <Example>
            <Correct>
              ```tsx
              export function ProjectsFormSkeleton() {
                return (
                  <div className="space-y-6 px-2">
                    <Skeleton className="h-4 w-[100px]" />
                    <Skeleton className="h-10 w-full rounded-md" />
                  </div>
                );
              }
              ```
            </Correct>
          </Example>
        </Convention>

        <Convention>
          <Description>
            Show skeleton placeholders in place of the real form/table
            while `loading` or `data` is null in an Apollo query.
          </Description>
          <Example>
            <Correct>
              ```tsx
              {loading ? <ProfilesFormSkeleton /> : <ProfilesForm ... />}
              ```
            </Correct>
          </Example>
        </Convention>

      </Conventions>
    </Rule>


    <!-- ========================================================= -->
    <!-- 4) Dialog + Form Patterns -->
    <!-- --------------------------------------------------------- -->
    <Rule>
      <Name>dialog_form_pattern</Name>
      <Description>
        When creating or updating entities in a modal/dialog (e.g., Project, Template),
        follow a consistent “DialogHeader + ... + Confirm/Cancel” pattern.
      </Description>
      <Pattern>\.(tsx|jsx)$</Pattern>
      <Conventions>

        <Convention>
          <Description>
            Use a consistent <Dialog> structure with <DialogHeader>, <DialogTitle>,
            and an actions footer that includes Cancel and Submit buttons.
          </Description>
          <Example>
            <Correct>
              ```tsx
              <Dialog open={isOpen} onOpenChange={setIsOpen}>
                <DialogContent>
                  <DialogHeader>
                    <DialogTitle>Create Project</DialogTitle>
                  </DialogHeader>
                  <ProjectsForm ref={formRef} />
                  <div className="flex justify-end space-x-2">
                    <Button variant="outline" onClick={() => setIsOpen(false)}>Cancel</Button>
                    <Button onClick={handleSubmit}>Create</Button>
                  </div>
                </DialogContent>
              </Dialog>
              ```
            </Correct>
          </Example>
        </Convention>

        <Convention>
          <Description>
            Use a formRef.current?.mutationLoading to disable the confirm button and show a spinner 
            if the mutation is in progress.
          </Description>
          <Example>
            <Correct>
              ```tsx
              <Button
                disabled={formRef.current?.mutationLoading}
              >
                {formRef.current?.mutationLoading && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                Create
              </Button>
              ```
            </Correct>
          </Example>
        </Convention>

      </Conventions>
    </Rule>


    <!-- ========================================================= -->
    <!-- 5) Table / List View Patterns -->
    <!-- --------------------------------------------------------- -->
    <Rule>
      <Name>table_list_pattern</Name>
      <Description>
        For listing items, use the react-table-based approach with sorting, 
        column definitions, and skeleton placeholders while loading. 
      </Description>
      <Pattern>\.(tsx|jsx)$</Pattern>
      <Conventions>

        <Convention>
          <Description>
            Separate columns logic into a useMemo block. 
            Use the table’s onClick row handler to navigate or perform an action.
          </Description>
          <Example>
            <Correct>
              ```tsx
              const columns = useMemo<ColumnDef<DataType>[]>(
                () => [
                  { accessorKey: 'name', header: 'Name' },
                  ...
                ],
                []
              );
              const table = useReactTable({ data, columns, ... });
              ```
            </Correct>
          </Example>
        </Convention>

        <Convention>
          <Description>
            Show 5–6 skeleton rows if loading. If data is empty, show “No items found.”
          </Description>
          <Example>
            <Correct>
              ```tsx
              {loading
                ? <SkeletonRows />
                : table.getRowModel().rows.map( row => ... )
              }
              ```
            </Correct>
          </Example>
        </Convention>

      </Conventions>
    </Rule>


    <!-- ========================================================= -->
    <!-- 6) <AuthenticatedProviders> and Supabase Auth -->
    <!-- --------------------------------------------------------- -->
    <Rule>
      <Name>supabase_auth_pattern</Name>
      <Description>
        Use <AuthenticatedProviders> (ApolloProvider + AuthenticatedUserNodeProvider) 
        in layout or root to handle session management and user data.
      </Description>
      <Pattern>\.(tsx|jsx)$</Pattern>
      <Conventions>

        <Convention>
          <Description>
            Always wrap the main app in <AuthenticatedProviders> to ensure 
            user data is fetched and available for child components.
          </Description>
          <Example>
            <Correct>
              ```tsx
              <AppLayout>
                <AuthenticatedProviders>
                  {children}
                </AuthenticatedProviders>
              </AppLayout>
              ```
            </Correct>
          </Example>
        </Convention>

        <Convention>
          <Description>
            If the user is not authenticated, handle redirect logic in 
            Next.js middleware or the Auth provider’s effect.
          </Description>
          <Example>
            <Correct>
              ```tsx
              useEffect(() => {
                const { user } = await supabase.auth.getUser();
                if (!user) router.push('/login');
              }, []);
              ```
            </Correct>
          </Example>
        </Convention>

      </Conventions>
    </Rule>


    <!-- ========================================================= -->
    <!-- 7) Organization + Query State Combobox -->
    <!-- --------------------------------------------------------- -->
    <Rule>
      <Name>organization_combobox_pattern</Name>
      <Description>
        For switching the active organization, use a consistent combobox 
        that sets organizationId in query params (via nuqs). 
        Optionally allow “Create new” inside the command popover.
      </Description>
      <Pattern>\.(tsx|jsx)$</Pattern>
      <Conventions>

        <Convention>
          <Description>
            Provide a “Create Organization” action in the CommandGroup with a <Plus> icon,
            opening a Dialog that uses <OrganizationsForm>.
          </Description>
          <Example>
            <Correct>
              ```tsx
              <CommandGroup>
                {orgs.map(...)}
                <CommandItem onSelect={handleCreateOrganization}>
                  <Plus className="mr-2" />
                  Create Organization
                </CommandItem>
              </CommandGroup>
              ```
            </Correct>
          </Example>
        </Convention>

        <Convention>
          <Description>
            If organizations are loading or empty, show a skeleton or fallback 
            until the query resolves. Auto-select the first org if none is selected.
          </Description>
        </Convention>

      </Conventions>
    </Rule>


    <!-- ========================================================= -->
    <!-- 8) Pattern for File Upload Fields (Avatar, etc.) -->
    <!-- --------------------------------------------------------- -->
    <Rule>
      <Name>file_upload_pattern</Name>
      <Description>
        Use <FileUpload.Root> from @ark-ui/react for uploading images (profile or org pictures).
        Wrap the final avatar in a camera overlay for easy re-uploads.
      </Description>
      <Pattern>\.(tsx|jsx)$</Pattern>
      <Conventions>

        <Convention>
          <Description>Center the upload field. Show current picture or fallback initials.</Description>
          <Example>
            <Correct>
              ```tsx
              <FileUpload.Root
                maxFiles={1}
                accept="image/*"
                onFileAccept={(details) => {
                  onChange(details.files[0]);
                }}
              >
                <FileUpload.Dropzone>
                  <Avatar>
                    ...
                  </Avatar>
                </FileUpload.Dropzone>
              </FileUpload.Root>
              ```
            </Correct>
          </Example>
        </Convention>

        <Convention>
          <Description>
            Always handle the final file path in a backend mutation (e.g., move from temp to final).
            If upload fails, set a form error or throw an ApolloError.
          </Description>
        </Convention>

      </Conventions>
    </Rule>


    <!-- ========================================================= -->
    <!-- 9) Next.js Middleware for Auth + Onboarding -->
    <!-- --------------------------------------------------------- -->
    <Rule>
      <Name>middleware_auth_onboarding</Name>
      <Description>
        In the root `middleware.ts`, chain an auth check (updateSession) 
        with an onboarding check (handleOnboardingRedirect). 
      </Description>
      <Pattern>^src/middleware\.ts$</Pattern>
      <Conventions>

        <Convention>
          <Description>
            If the user is unauthenticated, redirect to /login (unless on a public route).
            If user is authenticated but not onboarded (no profile or orgs), 
            redirect to /onboarding.
          </Description>
          <Example>
            <Correct>
              ```ts
              if (!user && privateRoute) {
                // -> redirect to /login
              }
              if (!isOnboarded && !pathname.startsWith('/onboarding')) {
                // -> redirect to /onboarding
              }
              ```
            </Correct>
          </Example>
        </Convention>

      </Conventions>
    </Rule>


    <!-- ========================================================= -->
    <!-- 10) Shadcn/UI + @usepulse/ui for Common Components -->
    <!-- --------------------------------------------------------- -->
    <Rule>
      <Name>shadcn_ui_compat</Name>
      <Description>
        Default to @usepulse/ui (shadcn-based) for forms, inputs, buttons, 
        dialogs, toasts, etc. Only build custom UI if not provided.
      </Description>
      <Pattern>\.(tsx|jsx)$</Pattern>
      <Conventions>

        <Convention>
          <Description>
            Import from @usepulse/ui/components/... for all standard UI. 
            Avoid rewriting built-in shadcn wrappers.
          </Description>
          <Example>
            <Correct>
              ```tsx
              import { Button, Input, Dialog } from "@usepulse/ui/components";
              ```
            </Correct>
            <Incorrect>
              ```tsx
              function CustomButton() {
                return <button>...</button>;
              }
              ```
            </Incorrect>
          </Example>
        </Convention>

      </Conventions>
    </Rule>

  </Rules>
</Root>
