{
  "id": "a833cce4-a4e3-4420-9740-837c187da47d",
  "prevId": "cec442ee-ae04-457a-82ee-94e76c301fcf",
  "version": "7",
  "dialect": "postgresql",
  "tables": {
    "public.profiles": {
      "name": "profiles",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "email": {
          "name": "email",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "first_name": {
          "name": "first_name",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "last_name": {
          "name": "last_name",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "phone_number": {
          "name": "phone_number",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "profile_picture_url": {
          "name": "profile_picture_url",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {
        "profiles_email_idx": {
          "name": "profiles_email_idx",
          "columns": [
            {
              "expression": "email",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "profiles_id_users_id_fk": {
          "name": "profiles_id_users_id_fk",
          "tableFrom": "profiles",
          "tableTo": "users",
          "schemaTo": "auth",
          "columnsFrom": [
            "id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "profiles_update_policy": {
          "name": "profiles_update_policy",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "public"
          ],
          "using": "auth.uid() = profiles.id",
          "withCheck": "true"
        },
        "profiles_select_policy": {
          "name": "profiles_select_policy",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "public"
          ],
          "using": "true"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.organizations": {
      "name": "organizations",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "created_by": {
          "name": "created_by",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "updated_by": {
          "name": "updated_by",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "deleted_at": {
          "name": "deleted_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "profile_picture_url": {
          "name": "profile_picture_url",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {},
      "foreignKeys": {
        "organizations_created_by_profiles_id_fk": {
          "name": "organizations_created_by_profiles_id_fk",
          "tableFrom": "organizations",
          "tableTo": "profiles",
          "columnsFrom": [
            "created_by"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "organizations_updated_by_profiles_id_fk": {
          "name": "organizations_updated_by_profiles_id_fk",
          "tableFrom": "organizations",
          "tableTo": "profiles",
          "columnsFrom": [
            "updated_by"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "organizations_name_unique_idx": {
          "name": "organizations_name_unique_idx",
          "nullsNotDistinct": false,
          "columns": [
            "name"
          ]
        }
      },
      "policies": {
        "organizations_insert_policy": {
          "name": "organizations_insert_policy",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "public"
          ],
          "withCheck": "auth.uid() IS NOT NULL"
        },
        "organizations_select_policy": {
          "name": "organizations_select_policy",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "public"
          ],
          "using": "\n    EXISTS (\n        SELECT 1\n        FROM organization_members om\n        WHERE om.organization_id = organizations.id\n        AND om.profile_id = auth.uid()\n    )\n OR organizations.created_by = auth.uid()"
        },
        "organizations_update_policy": {
          "name": "organizations_update_policy",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "public"
          ],
          "using": "\n    EXISTS (\n        SELECT 1\n        FROM organization_members om\n        WHERE om.organization_id = organizations.id\n        AND om.profile_id = auth.uid()\n        AND om.role IN ('Owner', 'Administrator')\n    )\n",
          "withCheck": "true"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.organization_members": {
      "name": "organization_members",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "created_by": {
          "name": "created_by",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "updated_by": {
          "name": "updated_by",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "deleted_at": {
          "name": "deleted_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false
        },
        "profile_id": {
          "name": "profile_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        },
        "organization_id": {
          "name": "organization_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        },
        "role": {
          "name": "role",
          "type": "organization_roles",
          "typeSchema": "public",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {},
      "foreignKeys": {
        "organization_members_created_by_profiles_id_fk": {
          "name": "organization_members_created_by_profiles_id_fk",
          "tableFrom": "organization_members",
          "tableTo": "profiles",
          "columnsFrom": [
            "created_by"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "organization_members_updated_by_profiles_id_fk": {
          "name": "organization_members_updated_by_profiles_id_fk",
          "tableFrom": "organization_members",
          "tableTo": "profiles",
          "columnsFrom": [
            "updated_by"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "organization_members_profile_id_profiles_id_fk": {
          "name": "organization_members_profile_id_profiles_id_fk",
          "tableFrom": "organization_members",
          "tableTo": "profiles",
          "columnsFrom": [
            "profile_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "organization_members_organization_id_organizations_id_fk": {
          "name": "organization_members_organization_id_organizations_id_fk",
          "tableFrom": "organization_members",
          "tableTo": "organizations",
          "columnsFrom": [
            "organization_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "org_member_unique_idx": {
          "name": "org_member_unique_idx",
          "nullsNotDistinct": false,
          "columns": [
            "profile_id",
            "organization_id"
          ]
        }
      },
      "policies": {
        "organization_members_select_policy": {
          "name": "organization_members_select_policy",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "public"
          ],
          "using": "is_org_member(organization_members.organization_id, auth.uid())"
        },
        "organization_members_insert_admin_policy": {
          "name": "organization_members_insert_admin_policy",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "public"
          ],
          "withCheck": "is_org_manager(organization_members.organization_id, auth.uid())"
        },
        "organization_members_insert_invited_policy": {
          "name": "organization_members_insert_invited_policy",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "public"
          ],
          "withCheck": "\n            EXISTS (\n                SELECT 1 FROM organization_invites oi\n                WHERE oi.organization_id = organization_members.organization_id\n                AND oi.email = (\n                    SELECT email FROM profiles WHERE profiles.id = auth.uid()\n                )\n                AND oi.role = organization_members.role\n                AND oi.accepted_at IS NULL\n                AND oi.expires_at > now()\n            )\n            AND auth.uid() = organization_members.profile_id\n        "
        },
        "organization_members_insert_no_members_policy": {
          "name": "organization_members_insert_no_members_policy",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "public"
          ],
          "withCheck": "\n            (\n                NOT EXISTS (\n                    SELECT 1 FROM organization_members om\n                    WHERE om.organization_id = organization_members.organization_id\n                )\n                AND EXISTS (\n                    SELECT 1 FROM organizations o\n                    WHERE o.id = organization_members.organization_id\n                    AND o.created_by = auth.uid()\n                )\n            )\n        "
        },
        "organization_members_update_policy": {
          "name": "organization_members_update_policy",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "public"
          ],
          "using": "EXISTS (\n                SELECT 1 FROM organization_members om\n                WHERE om.organization_id = organization_members.organization_id\n                AND om.profile_id = auth.uid()\n                AND (\n                    om.role = 'Owner'\n                    OR (\n                        om.role = 'Administrator'\n                        AND organization_members.role != 'Owner'\n                    )\n                )\n            )\n        ",
          "withCheck": "true"
        },
        "organization_members_delete_policy": {
          "name": "organization_members_delete_policy",
          "as": "PERMISSIVE",
          "for": "DELETE",
          "to": [
            "public"
          ],
          "using": "\n    EXISTS (\n        SELECT 1\n        FROM organization_members om\n        WHERE om.organization_id = organization_members.organization_id\n        AND om.profile_id = auth.uid()\n        AND om.role IN ('Owner', 'Administrator')\n    )\n"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.organization_invites": {
      "name": "organization_invites",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "created_by": {
          "name": "created_by",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "updated_by": {
          "name": "updated_by",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "deleted_at": {
          "name": "deleted_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false
        },
        "email": {
          "name": "email",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "organization_id": {
          "name": "organization_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "organization_name": {
          "name": "organization_name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "role": {
          "name": "role",
          "type": "organization_roles",
          "typeSchema": "public",
          "primaryKey": false,
          "notNull": true
        },
        "invited_by": {
          "name": "invited_by",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "token": {
          "name": "token",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "expires_at": {
          "name": "expires_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true
        },
        "accepted_at": {
          "name": "accepted_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {},
      "foreignKeys": {
        "organization_invites_created_by_profiles_id_fk": {
          "name": "organization_invites_created_by_profiles_id_fk",
          "tableFrom": "organization_invites",
          "tableTo": "profiles",
          "columnsFrom": [
            "created_by"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "organization_invites_updated_by_profiles_id_fk": {
          "name": "organization_invites_updated_by_profiles_id_fk",
          "tableFrom": "organization_invites",
          "tableTo": "profiles",
          "columnsFrom": [
            "updated_by"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "organization_invites_organization_id_organizations_id_fk": {
          "name": "organization_invites_organization_id_organizations_id_fk",
          "tableFrom": "organization_invites",
          "tableTo": "organizations",
          "columnsFrom": [
            "organization_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "organization_invites_invited_by_profiles_id_fk": {
          "name": "organization_invites_invited_by_profiles_id_fk",
          "tableFrom": "organization_invites",
          "tableTo": "profiles",
          "columnsFrom": [
            "invited_by"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "organization_invites_email_org_idx": {
          "name": "organization_invites_email_org_idx",
          "nullsNotDistinct": false,
          "columns": [
            "email",
            "organization_id"
          ]
        },
        "organization_invites_token_idx": {
          "name": "organization_invites_token_idx",
          "nullsNotDistinct": false,
          "columns": [
            "token"
          ]
        }
      },
      "policies": {
        "organization_invites_select_policy": {
          "name": "organization_invites_select_policy",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "public"
          ],
          "using": "auth.role() IN ('anon', 'authenticated')"
        },
        "organization_invites_insert_policy": {
          "name": "organization_invites_insert_policy",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "public"
          ],
          "withCheck": "\n    EXISTS (\n        SELECT 1\n        FROM organization_members om\n        WHERE om.organization_id = organization_invites.organization_id\n        AND om.profile_id = auth.uid()\n        AND om.role IN ('Owner', 'Administrator')\n    )\n"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.projects": {
      "name": "projects",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "created_by": {
          "name": "created_by",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "updated_by": {
          "name": "updated_by",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "deleted_at": {
          "name": "deleted_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "organization_id": {
          "name": "organization_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        },
        "profile_id": {
          "name": "profile_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {},
      "foreignKeys": {
        "projects_created_by_profiles_id_fk": {
          "name": "projects_created_by_profiles_id_fk",
          "tableFrom": "projects",
          "tableTo": "profiles",
          "columnsFrom": [
            "created_by"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "projects_updated_by_profiles_id_fk": {
          "name": "projects_updated_by_profiles_id_fk",
          "tableFrom": "projects",
          "tableTo": "profiles",
          "columnsFrom": [
            "updated_by"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "projects_organization_id_organizations_id_fk": {
          "name": "projects_organization_id_organizations_id_fk",
          "tableFrom": "projects",
          "tableTo": "organizations",
          "columnsFrom": [
            "organization_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "projects_profile_id_profiles_id_fk": {
          "name": "projects_profile_id_profiles_id_fk",
          "tableFrom": "projects",
          "tableTo": "profiles",
          "columnsFrom": [
            "profile_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "projects_select_policy": {
          "name": "projects_select_policy",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "public"
          ],
          "using": "\n    EXISTS (\n        SELECT 1\n        FROM organization_members om\n        WHERE om.organization_id = projects.organization_id\n        AND om.profile_id = auth.uid()\n    )\n"
        },
        "projects_select_policy_self": {
          "name": "projects_select_policy_self",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "public"
          ],
          "using": "projects.profile_id = auth.uid()"
        },
        "projects_insert_policy": {
          "name": "projects_insert_policy",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "public"
          ],
          "withCheck": "projects.organization_id IS NULL AND projects.profile_id = auth.uid()"
        },
        "projects_insert_policy_org": {
          "name": "projects_insert_policy_org",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "public"
          ],
          "withCheck": "\n    EXISTS (\n        SELECT 1\n        FROM organization_members om\n        WHERE om.organization_id = projects.organization_id\n        AND om.profile_id = auth.uid()\n    )\n"
        },
        "projects_update_policy_self": {
          "name": "projects_update_policy_self",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "public"
          ],
          "using": "projects.profile_id = auth.uid()"
        },
        "projects_update_policy_org": {
          "name": "projects_update_policy_org",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "public"
          ],
          "withCheck": "\n    EXISTS (\n        SELECT 1\n        FROM organization_members om\n        WHERE om.organization_id = projects.organization_id\n        AND om.profile_id = auth.uid()\n    )\n"
        },
        "projects_delete_policy_org": {
          "name": "projects_delete_policy_org",
          "as": "PERMISSIVE",
          "for": "DELETE",
          "to": [
            "public"
          ],
          "using": "\n    EXISTS (\n        SELECT 1\n        FROM organization_members om\n        WHERE om.organization_id = projects.organization_id\n        AND om.profile_id = auth.uid()\n        AND om.role IN ('Owner', 'Administrator')\n    )\n"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.components": {
      "name": "components",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "created_by": {
          "name": "created_by",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "updated_by": {
          "name": "updated_by",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "deleted_at": {
          "name": "deleted_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "project_id": {
          "name": "project_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {},
      "foreignKeys": {
        "components_created_by_profiles_id_fk": {
          "name": "components_created_by_profiles_id_fk",
          "tableFrom": "components",
          "tableTo": "profiles",
          "columnsFrom": [
            "created_by"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "components_updated_by_profiles_id_fk": {
          "name": "components_updated_by_profiles_id_fk",
          "tableFrom": "components",
          "tableTo": "profiles",
          "columnsFrom": [
            "updated_by"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "components_project_id_projects_id_fk": {
          "name": "components_project_id_projects_id_fk",
          "tableFrom": "components",
          "tableTo": "projects",
          "columnsFrom": [
            "project_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "components_select_policy": {
          "name": "components_select_policy",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "public"
          ],
          "using": "EXISTS (\n        SELECT 1\n        FROM projects p\n        LEFT JOIN organization_members om ON om.organization_id = p.organization_id\n        WHERE p.id = components.project_id\n        AND (\n            (p.organization_id IS NOT NULL AND om.profile_id = auth.uid())\n            OR\n            (p.organization_id IS NULL AND p.profile_id = auth.uid())\n        )\n    )\n    "
        },
        "components_insert_policy": {
          "name": "components_insert_policy",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "public"
          ],
          "withCheck": "EXISTS (\n        SELECT 1\n        FROM projects p\n        LEFT JOIN organization_members om ON om.organization_id = p.organization_id\n        WHERE p.id = components.project_id\n        AND (\n            (p.organization_id IS NOT NULL AND om.profile_id = auth.uid())\n            OR\n            (p.organization_id IS NULL AND p.profile_id = auth.uid())\n        )\n    )\n    "
        },
        "components_update_policy": {
          "name": "components_update_policy",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "public"
          ],
          "using": "EXISTS (\n        SELECT 1\n        FROM projects p\n        LEFT JOIN organization_members om ON om.organization_id = p.organization_id\n        WHERE p.id = components.project_id\n        AND (\n            (p.organization_id IS NOT NULL AND om.profile_id = auth.uid())\n            OR\n            (p.organization_id IS NULL AND p.profile_id = auth.uid())\n        )\n    )\n    "
        },
        "components_delete_policy": {
          "name": "components_delete_policy",
          "as": "PERMISSIVE",
          "for": "DELETE",
          "to": [
            "public"
          ],
          "using": "\n    EXISTS (\n        SELECT 1 \n        FROM projects p\n        LEFT JOIN organization_members om ON om.organization_id = p.organization_id\n        WHERE p.id = components.project_id\n        AND (\n        (p.organization_id IS NULL AND p.profile_id = auth.uid())\n        OR\n        (\n            p.organization_id IS NOT NULL\n            AND om.profile_id = auth.uid()\n            AND om.role IN ('Owner', 'Administrator')\n        )\n        )\n    )\n"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.ai_chats": {
      "name": "ai_chats",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "created_by": {
          "name": "created_by",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "updated_by": {
          "name": "updated_by",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "deleted_at": {
          "name": "deleted_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "project_id": {
          "name": "project_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        },
        "component_id": {
          "name": "component_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {
        "ai_chat_project_id_idx": {
          "name": "ai_chat_project_id_idx",
          "columns": [
            {
              "expression": "project_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "ai_chat_component_id_idx": {
          "name": "ai_chat_component_id_idx",
          "columns": [
            {
              "expression": "component_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "ai_chats_created_by_profiles_id_fk": {
          "name": "ai_chats_created_by_profiles_id_fk",
          "tableFrom": "ai_chats",
          "tableTo": "profiles",
          "columnsFrom": [
            "created_by"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "ai_chats_updated_by_profiles_id_fk": {
          "name": "ai_chats_updated_by_profiles_id_fk",
          "tableFrom": "ai_chats",
          "tableTo": "profiles",
          "columnsFrom": [
            "updated_by"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "ai_chats_project_id_projects_id_fk": {
          "name": "ai_chats_project_id_projects_id_fk",
          "tableFrom": "ai_chats",
          "tableTo": "projects",
          "columnsFrom": [
            "project_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "ai_chats_component_id_components_id_fk": {
          "name": "ai_chats_component_id_components_id_fk",
          "tableFrom": "ai_chats",
          "tableTo": "components",
          "columnsFrom": [
            "component_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "ai_chat_all_policy": {
          "name": "ai_chat_all_policy",
          "as": "PERMISSIVE",
          "for": "ALL",
          "to": [
            "public"
          ],
          "using": "\n            (\n                ai_chats.project_id IS NOT NULL \n                AND EXISTS (\n        SELECT 1\n        FROM projects p\n        LEFT JOIN organization_members om ON om.organization_id = p.organization_id\n        WHERE p.id = ai_chats.project_id\n        AND (\n            (p.organization_id IS NOT NULL AND om.profile_id = auth.uid())\n            OR\n            (p.organization_id IS NULL AND p.profile_id = auth.uid())\n        )\n    )\n    \n            )\n        OR\n        (\n            ai_chats.component_id IS NOT NULL \n            AND EXISTS (\n        SELECT 1\n        FROM projects p\n        LEFT JOIN organization_members om ON om.organization_id = p.organization_id\n        WHERE p.id = (SELECT project_id FROM components WHERE id = ai_chats.component_id)\n        AND (\n            (p.organization_id IS NOT NULL AND om.profile_id = auth.uid())\n            OR\n            (p.organization_id IS NULL AND p.profile_id = auth.uid())\n        )\n    )\n    \n        )\n        "
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.ai_chat_messages": {
      "name": "ai_chat_messages",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "created_by": {
          "name": "created_by",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "updated_by": {
          "name": "updated_by",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "deleted_at": {
          "name": "deleted_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false
        },
        "chat_id": {
          "name": "chat_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "role": {
          "name": "role",
          "type": "message_roles",
          "typeSchema": "public",
          "primaryKey": false,
          "notNull": true
        },
        "content": {
          "name": "content",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "annotations": {
          "name": "annotations",
          "type": "json",
          "primaryKey": false,
          "notNull": false
        },
        "parts": {
          "name": "parts",
          "type": "json",
          "primaryKey": false,
          "notNull": true
        },
        "attachments": {
          "name": "attachments",
          "type": "json",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {
        "ai_chat_messages_chat_id_idx": {
          "name": "ai_chat_messages_chat_id_idx",
          "columns": [
            {
              "expression": "chat_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "ai_chat_messages_created_by_profiles_id_fk": {
          "name": "ai_chat_messages_created_by_profiles_id_fk",
          "tableFrom": "ai_chat_messages",
          "tableTo": "profiles",
          "columnsFrom": [
            "created_by"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "ai_chat_messages_updated_by_profiles_id_fk": {
          "name": "ai_chat_messages_updated_by_profiles_id_fk",
          "tableFrom": "ai_chat_messages",
          "tableTo": "profiles",
          "columnsFrom": [
            "updated_by"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "ai_chat_messages_chat_id_ai_chats_id_fk": {
          "name": "ai_chat_messages_chat_id_ai_chats_id_fk",
          "tableFrom": "ai_chat_messages",
          "tableTo": "ai_chats",
          "columnsFrom": [
            "chat_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "ai_chat_messages_select_policy": {
          "name": "ai_chat_messages_select_policy",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "public"
          ],
          "using": "\n    EXISTS (\n      SELECT 1 \n      FROM ai_chats ac\n      LEFT JOIN projects p ON p.id = ac.project_id\n      LEFT JOIN components c ON c.id = ac.component_id\n      LEFT JOIN projects cp ON cp.id = c.project_id\n      LEFT JOIN organization_members om ON \n        om.organization_id = COALESCE(p.organization_id, cp.organization_id)\n      WHERE ac.id = ai_chat_messages.chat_id\n        AND (\n          (\n            ac.project_id IS NOT NULL \n            AND (\n              (p.organization_id IS NOT NULL AND om.profile_id = auth.uid())\n              OR (p.organization_id IS NULL AND p.profile_id = auth.uid())\n            )\n          )\n          OR\n          (\n            ac.component_id IS NOT NULL \n            AND (\n              (cp.organization_id IS NOT NULL AND om.profile_id = auth.uid())\n              OR (cp.organization_id IS NULL AND cp.profile_id = auth.uid())\n            )\n          )\n        )\n    )\n"
        },
        "ai_chat_messages_insert_policy": {
          "name": "ai_chat_messages_insert_policy",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "public"
          ],
          "withCheck": "\n    EXISTS (\n      SELECT 1 \n      FROM ai_chats ac\n      LEFT JOIN projects p ON p.id = ac.project_id\n      LEFT JOIN components c ON c.id = ac.component_id\n      LEFT JOIN projects cp ON cp.id = c.project_id\n      LEFT JOIN organization_members om ON \n        om.organization_id = COALESCE(p.organization_id, cp.organization_id)\n      WHERE ac.id = ai_chat_messages.chat_id\n        AND (\n          (\n            ac.project_id IS NOT NULL \n            AND (\n              (p.organization_id IS NOT NULL AND om.profile_id = auth.uid())\n              OR (p.organization_id IS NULL AND p.profile_id = auth.uid())\n            )\n          )\n          OR\n          (\n            ac.component_id IS NOT NULL \n            AND (\n              (cp.organization_id IS NOT NULL AND om.profile_id = auth.uid())\n              OR (cp.organization_id IS NULL AND cp.profile_id = auth.uid())\n            )\n          )\n        )\n    )\n"
        },
        "ai_chat_messages_update_policy": {
          "name": "ai_chat_messages_update_policy",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "public"
          ],
          "using": "\n    EXISTS (\n      SELECT 1 \n      FROM ai_chats ac\n      LEFT JOIN projects p ON p.id = ac.project_id\n      LEFT JOIN components c ON c.id = ac.component_id\n      LEFT JOIN projects cp ON cp.id = c.project_id\n      LEFT JOIN organization_members om ON \n        om.organization_id = COALESCE(p.organization_id, cp.organization_id)\n      WHERE ac.id = ai_chat_messages.chat_id\n        AND (\n          (\n            ac.project_id IS NOT NULL \n            AND (\n              (p.organization_id IS NOT NULL AND om.profile_id = auth.uid())\n              OR (p.organization_id IS NULL AND p.profile_id = auth.uid())\n            )\n          )\n          OR\n          (\n            ac.component_id IS NOT NULL \n            AND (\n              (cp.organization_id IS NOT NULL AND om.profile_id = auth.uid())\n              OR (cp.organization_id IS NULL AND cp.profile_id = auth.uid())\n            )\n          )\n        )\n    )\n"
        },
        "ai_chat_messages_delete_policy": {
          "name": "ai_chat_messages_delete_policy",
          "as": "PERMISSIVE",
          "for": "DELETE",
          "to": [
            "public"
          ],
          "using": "\n    EXISTS (\n      SELECT 1 \n      FROM ai_chats ac\n      LEFT JOIN projects p ON p.id = ac.project_id\n      LEFT JOIN components c ON c.id = ac.component_id\n      LEFT JOIN projects cp ON cp.id = c.project_id\n      LEFT JOIN organization_members om ON \n        om.organization_id = COALESCE(p.organization_id, cp.organization_id)\n      WHERE ac.id = ai_chat_messages.chat_id\n        AND (\n          (\n            ac.project_id IS NOT NULL \n            AND (\n              (p.organization_id IS NOT NULL AND om.profile_id = auth.uid())\n              OR (p.organization_id IS NULL AND p.profile_id = auth.uid())\n            )\n          )\n          OR\n          (\n            ac.component_id IS NOT NULL \n            AND (\n              (cp.organization_id IS NOT NULL AND om.profile_id = auth.uid())\n              OR (cp.organization_id IS NULL AND cp.profile_id = auth.uid())\n            )\n          )\n        )\n    )\n"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    }
  },
  "enums": {
    "public.organization_roles": {
      "name": "organization_roles",
      "schema": "public",
      "values": [
        "Owner",
        "Administrator",
        "Member"
      ]
    },
    "public.message_part_types": {
      "name": "message_part_types",
      "schema": "public",
      "values": [
        "text",
        "reasoning",
        "tool_invocation"
      ]
    },
    "public.message_roles": {
      "name": "message_roles",
      "schema": "public",
      "values": [
        "system",
        "user",
        "assistant",
        "data"
      ]
    },
    "public.tool_invocation_states": {
      "name": "tool_invocation_states",
      "schema": "public",
      "values": [
        "partial_call",
        "call",
        "result"
      ]
    }
  },
  "schemas": {},
  "sequences": {},
  "roles": {},
  "policies": {},
  "views": {},
  "_meta": {
    "columns": {},
    "schemas": {},
    "tables": {}
  }
}